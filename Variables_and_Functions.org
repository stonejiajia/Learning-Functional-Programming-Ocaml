#+TITLE: Variables_and_Functions

* Variables

#+BEGIN_SRC ocaml

let x = 3;;

#+END_SRC

#+RESULTS:
: 3

let <variable> = <expr1> in <expr2>

#+BEGIN_SRC ocaml

let languages = "OCaml, Perl, C++, C";;

#+END_SRC

#+RESULTS:
: OCaml, Perl, C++, C


#+BEGIN_SRC ocaml

let dashed_languages = 
  let language_list = String.split languages ~on:',' in
  String.concat ~sep:"-" language_list
;;

#+END_SRC

#+RESULTS:
: "OCaml- Perl- C++- C"


#+BEGIN_SRC ocaml

let languages = "OCaml, Perl, C++, C"

#+END_SRC

#+RESULTS:
: OCaml, Perl, C++, C

#+BEGIN_SRC ocaml

let dashed_language =
  let languages = String.split languages ~on:',' in 
  String.concat ~sep:"-" languages
;;

#+END_SRC

#+RESULTS:
: "OCaml- Perl- C++- C"

#+BEGIN_SRC ocaml
let area_of_ring inner_radius outer_radius = 
  let pi = acos (-1.) in 
  let area_of_circle r = pi *. r *. r in 
  area_of_circle outer_radius -. area_of_circle inner_radius

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml

area_of_ring 1. 3.

#+END_SRC

#+RESULTS:
: 25.132741228718345

** shadowed

#+BEGIN_SRC ocaml

let area_of_ring inner_radius outer_radius =
  let pi = acos (-1.) in 
  let area_of_circle r = pi *. r *. r in 
  let pi = 0. in 
  area_of_circle outer_radius -. area_of_circle inner_radius
;;

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml

area_of_ring 1. 3.

#+END_SRC

#+RESULTS:
: 25.132741228718345

重新定义了 pi, 但是结果和之前一样，因为最开始定义的 pi 没有变，只是被 shadowed,
意思就是之后的 pi 的值都是 0，但是第一个 pi 的值依旧不变，上段代码中并没有用到
pi = 0，所以结果还是一样。

在 OCaml 中 let bindings 是不可变的。

* Pattern Matching and let

#+BEGIN_SRC ocaml

let (ints, strings) = List.unzip [(1, "one"); (2, "two"); (3, "three")];;

#+END_SRC

#+RESULTS:
| one | two | three |

(ints , strings) 是 pattern

Tuple and record patterns are irrefutable

#+BEGIN_SRC ocaml
let upcase_first_enty line = 
  let (first :: rest) = String.split ~on:',' line in 
  String.concat ~sep:"," (String.uppercase first :: rest)

#+END_SRC

#+RESULTS:
: <fun>

由于 String.split 返回的是 List ， 且至少有一个元素，但是 Complier 不知道，所以
 emits warning.
 
 #+BEGIN_SRC ocaml

 let upcase_first_enty line =
   match String.split ~on:',' line with
   | [] -> assert false 
   | first :: rest -> String.concat ~sep:"," (String.uppercase first :: rest)

 #+END_SRC

 #+RESULTS:
 : <fun>
