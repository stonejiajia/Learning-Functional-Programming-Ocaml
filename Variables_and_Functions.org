#+TITLE: Variables_and_Functions

* Variables

#+BEGIN_SRC ocaml

let x = 3;;

#+END_SRC

#+RESULTS:
: 3

let <variable> = <expr1> in <expr2>

#+BEGIN_SRC ocaml

let languages = "OCaml, Perl, C++, C";;

#+END_SRC

#+RESULTS:
: OCaml, Perl, C++, C


#+BEGIN_SRC ocaml

let dashed_languages = 
  let language_list = String.split languages ~on:',' in
  String.concat ~sep:"-" language_list
;;

#+END_SRC

#+RESULTS:
: "OCaml- Perl- C++- C"


#+BEGIN_SRC ocaml

let languages = "OCaml, Perl, C++, C"

#+END_SRC

#+RESULTS:
: OCaml, Perl, C++, C

#+BEGIN_SRC ocaml

let dashed_language =
  let languages = String.split languages ~on:',' in 
  String.concat ~sep:"-" languages
;;

#+END_SRC

#+RESULTS:
: "OCaml- Perl- C++- C"

#+BEGIN_SRC ocaml
let area_of_ring inner_radius outer_radius = 
  let pi = acos (-1.) in 
  let area_of_circle r = pi *. r *. r in 
  area_of_circle outer_radius -. area_of_circle inner_radius

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml

area_of_ring 1. 3.

#+END_SRC

#+RESULTS:
: 25.132741228718345

** shadowed

#+BEGIN_SRC ocaml

let area_of_ring inner_radius outer_radius =
  let pi = acos (-1.) in 
  let area_of_circle r = pi *. r *. r in 
  let pi = 0. in 
  area_of_circle outer_radius -. area_of_circle inner_radius
;;

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml

area_of_ring 1. 3.

#+END_SRC

#+RESULTS:
: 25.132741228718345

重新定义了 pi, 但是结果和之前一样，因为最开始定义的 pi 没有变，只是被 shadowed,
意思就是之后的 pi 的值都是 0，但是第一个 pi 的值依旧不变，上段代码中并没有用到
pi = 0，所以结果还是一样。

在 OCaml 中 let bindings 是不可变的。

* Pattern Matching and let

#+BEGIN_SRC ocaml

let (ints, strings) = List.unzip [(1, "one"); (2, "two"); (3, "three")];;

#+END_SRC

#+RESULTS:
| one | two | three |

(ints , strings) 是 pattern

Tuple and record patterns are irrefutable

#+BEGIN_SRC ocaml
let upcase_first_enty line = 
  let (first :: rest) = String.split ~on:',' line in 
  String.concat ~sep:"," (String.uppercase first :: rest)

#+END_SRC

#+RESULTS:
: <fun>

由于 String.split 返回的是 List ， 且至少有一个元素，但是 Complier 不知道，所以
 emits warning.
 
 #+BEGIN_SRC ocaml

 let upcase_first_enty line =
   match String.split ~on:',' line with
   | [] -> assert false 
   | first :: rest -> String.concat ~sep:"," (String.uppercase first :: rest)

 #+END_SRC

 #+RESULTS:
 : <fun>

 
 
* COMMENT Functions

Anonymous Functions 匿名函数

#+BEGIN_SRC ocaml
open Core
#+END_SRC

#+RESULTS:

#+BEGIN_SRC ocaml

(fun x -> x + 1);;

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml

(fun x -> x + 1) 7;;

#+END_SRC

#+RESULTS:
: 8

#+BEGIN_SRC ocaml
List.map ~f:(fun x -> x + 1) [1;2;9];;

#+END_SRC

#+RESULTS:
: <abstr>

stuff them to a data structure

#+BEGIN_SRC ocaml
let increments = [(fun x -> x + 1); (fun x -> x + 2)];;

#+END_SRC

#+RESULTS:
| <fun> | <fun> |

#+BEGIN_SRC ocaml

List.map ~f:(fun g -> g 5) increments;;
#+END_SRC

#+RESULTS:
| 6 | 7 |

(fun g -> g 5)

这个函数里的 Arguments 也是一个函数 即高阶函数。

#+BEGIN_SRC ocaml
let pluson = (fun x -> x + 1)
#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
pluson 3

#+END_SRC

#+RESULTS:
: 4


#+BEGIN_SRC ocaml

let plusone x = x + 1;

#+END_SRC

#+RESULTS:
: <fun>

** let and fun

#+BEGIN_SRC ocaml
(fun x -> x + 1) 7;;
#+END_SRC

#+RESULTS:
: 8

#+BEGIN_SRC ocaml
let x = 7 in x + 1
#+END_SRC

#+RESULTS:
: 8


* Multiargument functions

#+BEGIN_SRC ocaml
open Base;;
let abs_diff x y = abs (x -y);;

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
abs_diff 9 8;;
#+End_src

#+RESULTS:
: 1

#+BEGIN_SRC ocaml
let abs_diff =
  (fun x -> (fun y -> abs (x - y)));;

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
abs_diff 3
#+END_SRC

#+RESULTS:
: <fun>

This style of function is called a curried function. (Currying is named after
Haskell Curry, a logician who had a significant impact on the design and theory 
of programming languages.) 

#+BEGIN_SRC ocaml
let dist_form_3 = abs_diff 3

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
dist_form_3 8
#+END_SRC

#+RESULTS:
: 5

#+BEGIN_SRC ocaml
dist_form_3 (-1)
#+END_SRC

#+RESULTS:
: 4

Partial application

#+BEGIN_SRC ocaml
let abs_diff = (fun x y -> abs (x - y))
#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
let abs_diff (x,y) = abs (x - y)
#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
abs_diff (3,4)
#+END_SRC

#+RESULTS:
: 1

* Recursive Functions

#+BEGIN_SRC ocaml

let rec find_first_stutter list = 
  match list with
  | [] | [_] ->
     None
  | x :: y :: tl ->
     if x = y then Some x else find_first_stutter (y::tl)

#+END_SRC

#+RESULTS:
: <fun>

the pattern  | [] | [_] is what's called an or-pattern , which is a disjunction
of two patterns, meaning that it will be considered a match if either pattern
matches.

所以 【】 对应的是 Empty List  【_】 对应的是single element

#+BEGIN_SRC ocaml
let rec is_even x = 
  if x = 0 then true else is_odd (x - 1)
and is_odd x = 
  if x = 0 then false else is_even (x -1)

#+END_SRC

#+RESULTS:
: <fun>


#+BEGIN_SRC ocaml

Int.max 3 4

#+END_SRC

#+RESULTS:
: 4

+ 也是一个函数
 
#+BEGIN_SRC ocaml
(+) 3 4

#+END_SRC

#+RESULTS:
: 7

#+BEGIN_SRC ocaml
List.map ~f:((+) 3) [4;5;6]
#+END_SRC

#+RESULTS:
| 7 | 8 | 9 |

这些都是 函数

! $ % & * + - . / : < = > ? @ ^ | ~

#+BEGIN_SRC ocaml

let (+!) (x1,y1) (x2,y2) = (x1 + x2, y1 + y2)

#+END_SRC

#+RESULTS:
: val ( +! ) :
:   Base__Int.t * Base__Int.t ->
:   Base__Int.t * Base__Int.t -> Base__Int.t * Base__Int.t = <fun>

#+BEGIN_SRC ocaml

let (***) x y = (x ** y) ** y

#+END_SRC

#+RESULTS:
: Characters 18-19:
:   let (***) x y = (x ** y) ** y;;
:                    ^
: Error: This expression has type Base__Int.t -> Base__Int.t
:        but an expression was expected of type Base__Int.t = int

(***) 是 OCaml 中的注释语句

#+BEGIN_SRC ocaml
let ( *** ) x y = (x ** y) ** y

#+END_SRC

#+RESULTS:
: <fun>


#+BEGIN_SRC ocaml
let (|>) x f = f x;;

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
let path = "/usr/bin:/usr/local/bin:/bin:/sbin"

#+END_SRC

#+RESULTS:
: /usr/bin:/usr/local/bin:/bin:/sbin

#+BEGIN_SRC ocaml

String.split ~on:':' path
|> List.dedup ~compare:String.compare
|> List.iter ~f:print_endline

#+END_SRC

#+RESULTS:
: ()

#+BEGIN_SRC ocaml
let split_path = String.split ~on:':' path in 
let deduped_path = List.dedup ~compare:String.compare split_path in 
List.iter ~f:print_endline deduped_path

#+END_SRC

#+RESULTS:
: ()

#+BEGIN_SRC ocaml
List.iter ~f:print_endline ["Two"; "lines"]

#+END_SRC

#+RESULTS:
: ()


#+BEGIN_SRC ocaml
List.iter ~f:print_endline
#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
let (^>) x f = f x
#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
let (^>) x f = f x;;

Core.Sys.getenv "PATH"
^> String.split ~on:':' path
^> List.dedup_and_sort ~compare:String.compare
^> List.iter ~f:print_endline
;;
#+END_SRC

#+RESULTS:
: Characters 103-129:
:   ^> List.iter ~f:print_endline
:      ^^^^^^^^^^^^^^^^^^^^^^^^^^
: Error: This expression has type Base.string Base.List.t -> unit
:        but an expression was expected of type
:          (Base.String.t Base.List.t -> Base.String.t Base.List.t) -> 'a
:        Type Base.string Base.List.t = Base.string list
:        is not compatible with type
:          Base.String.t Base.List.t -> Base.String.t Base.List.t

注意：
|> 是 left-associative
^> 是 right-associative


* Declaring Functions with Function

#+BEGIN_SRC ocaml

let some_or_zero = function
    | Some x -> x
    | None -> 0

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
List.map ~f:some_or_zero [Some 3; None; Some 4]
#+END_SRC

#+RESULTS:
| 3 | 0 | 4 |

用 match 的写法

#+BEGIN_SRC ocaml
let some_or_zero num_opt = 
  match num_opt with
  | Some x -> x
  | None -> 0
#+END_SRC

#+RESULTS:
: <fun>


#+BEGIN_SRC ocaml
let some_or_default default = function
  | Some x -> x
  | None -> default
              
              

#+END_SRC

#+RESULTS:
: <fun>


#+BEGIN_SRC ocaml
some_or_default 0 (Some 5)
#+END_SRC

#+RESULTS:
: 5

#+BEGIN_SRC ocaml
List.map ~f:(some_or_default 100) [Some 3; None; Some 4]
#+END_SRC

#+RESULTS:
| 3 | 100 | 4 |

#+BEGIN_SRC ocaml

some_or_default 9 (None)
#+END_SRC

#+RESULTS:
: 9

* Labeled Arguments

Labeled Arguments 是指函数中的 Arguments 由 name 来 identify（确定）

#+BEGIN_SRC ocaml
let ratio ~num ~denom = float num /. float denom

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
ratio ~num:3 ~denom:10
#+END_SRC

#+RESULTS:
: 0.3

** label punning

#+BEGIN_SRC ocaml
let num = 3 in
    let denom = 4 in 
    ratio ~num ~denom
#+END_SRC

#+RESULTS:
: 0.75


** Higher-order functions and labels

#+BEGIN_SRC ocaml
let apply_to_tuple f (first,second) = f ~first ~second
#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
let apply_to_tuple_2 f (first,second) = f ~second ~first
#+END_SRC

#+RESULTS:
: <fun>


#+BEGIN_SRC ocaml
let divide ~first ~second = first / second
#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
apply_to_tuple_2 divide (3,4)
#+END_SRC

#+RESULTS:
: Characters 17-23:
:   apply_to_tuple_2 divide (3,4);;
:                    ^^^^^^
: Error: This expression has type
:          first:Base__Int.t -> second:Base__Int.t -> Base__Int.t
:        but an expression was expected of type second:'a -> first:'b -> 'c

#+BEGIN_SRC ocaml
let apply_to_tuple f (first, second) = f ~first ~second
#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
apply_to_tuple divide (3, 4)
#+END_SRC

#+RESULTS:
: 0


* Optional Arguments


#+BEGIN_SRC ocaml
let concat ?sep x y =
  let sep = match sep with None -> "" | Some x -> x in
  x ^ sep ^ y
#+END_SRC

#+RESULTS:
: val concat :
:   ?sep:Base.String.t -> Base.String.t -> Base.String.t -> Base.String.t =
:   <fun>

#+BEGIN_SRC ocaml
concat "foo" "bar"
#+END_SRC

#+RESULTS:
: "foobar"

#+BEGIN_SRC ocaml
concat ~sep:":" "foo" "bar"
#+END_SRC

#+RESULTS:
: "foo:bar"


什么时候使用 Optional Arguments， 因为 Optional Arguments 有时很容易混淆。当有的
函数很少用的时候，就不要使用 Optional Arguments。

** Explicit passing of an  optional argument

#+BEGIN_SRC ocaml
concat ~sep:":" "foo" "bar"
#+END_SRC

#+RESULTS:
: "foo:bar"

#+BEGIN_SRC ocaml
concat ?sep:(Some ":") "foo" "bar"
#+END_SRC

#+RESULTS:
: "foo:bar"

#+BEGIN_SRC ocaml
concat ?sep:None "foo" "bar"
#+END_SRC

#+RESULTS:
: "foobar"

#+BEGIN_SRC ocaml
let uppercase_concat ?(sep="") a b = concat ~sep (String.uppercase a) b
#+END_SRC

#+RESULTS:
: val uppercase_concat :
:   ?sep:Base.String.t -> Base.String.t -> Base.String.t -> Base.String.t =
:   <fun>

#+BEGIN_SRC ocaml
uppercase_concat "foo" "bar"
#+END_SRC

#+RESULTS:
: "FOObar"

#+BEGIN_SRC ocaml
uppercase_concat "foo" "bar" ~sep:":"
#+END_SRC

#+RESULTS:
: "FOO:bar"

#+BEGIN_SRC ocaml
let uppercase_concat ?sep a b = concat ?sep (String.uppercase a) b
#+END_SRC

#+RESULTS:
: val uppercase_concat :
:   ?sep:Base.String.t -> Base.String.t -> Base.String.t -> Base.String.t =
:   <fun>

** Inference of labeled and optional argument

#+BEGIN_SRC ocaml 
let numeric_deriv ~delta ~x ~y ~f =
  let x' = x +. delta in 
  let y' = y +. delta in 
  let base = f ~x ~y in 
  let dx = (f ~x:x' ~y -. base) /. delta in 
  let dy = (f ~x ~y:y' -. base) /. delta in 
  (dx, dy)

#+END_SRC

#+RESULTS:
: val numeric_deriv :
:   delta:Base__Float.t ->
:   x:Base__Float.t ->
:   y:Base__Float.t ->
:   f:(x:Base__Float.t -> y:Base__Float.t -> Base__Float.t) ->
:   Base__Float.t * Base__Float.t = <fun>


#+BEGIN_SRC ocaml

#+END_SRC


** Optional arguments and partial application

#+BEGIN_SRC ocaml 
let colon_conat = concat ~sep:":"

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml 
colon_conat "a" "b"
#+END_SRC

#+RESULTS:
: "a:b"

#+BEGIN_SRC ocaml
let prepend_pound = concat "# "

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
prepend_pound "a BASH comment"

#+END_SRC

#+RESULTS:
: "#a BASH comment"

#+BEGIN_SRC ocaml
prepend_pound "a BASH comment" ~sep:":"

#+END_SRC

#+RESULTS:
: Characters 0-13:
:   prepend_pound "a BASH comment" ~sep:":";;
:   ^^^^^^^^^^^^^
: Error: This function has type Base.String.t -> Base.String.t
:        It is applied to too many arguments; maybe you forgot a `;'.

#+BEGIN_SRC ocaml
(* previous concat function*)
let concat ?sep x y =
  let sep = match sep with None -> "" | Some x -> x in
  x ^ sep ^ y

#+END_SRC

#+BEGIN_SRC ocaml
let concat x ?(sep="") y = x ^ sep ^ y

#+END_SRC

#+RESULTS:
: val concat :
:   Base.String.t -> ?sep:Base.String.t -> Base.String.t -> Base.String.t =
:   <fun>

#+BEGIN_SRC ocaml

prepend_pound "a BASH comment" ~sep:"--- "


#+END_SRC

#+RESULTS:
: Characters 1-14:
:   prepend_pound "a BASH comment" ~sep:"--- ";;
:   ^^^^^^^^^^^^^
: Error: This function has type Base.String.t -> Base.String.t
:        It is applied to too many arguments; maybe you forgot a `;'.
