#+TITLE: Case_by_Case

* Simple patter matching

#+BEGIN_SRC ocaml
let rec factorial a = 
  if a = 1 then 1 else a * factorial (a - 1)

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
let rec factorial a = 
  match a with
    1 -> 1
  | _ -> a * factorial (a - 1)

#+END_SRC

#+RESULTS:
: <fun>

See if a matches the pattern 1, If it does, just return 1, 
If not, see if it matches the pattern_ , If is does, then return
is a * factorial (a - 1).

*The pattern _ is special , it matches anything*


#+BEGIN_SRC ocaml
let isvowel c = 
  c = 'a' || c = 'e' || c = 'i';;

#+END_SRC

#+RESULTS:
: <fun>

Here is how to write it using matching

#+BEGIN_SRC ocaml

let isvowel c = 
  match c with 
    'a' -> true
  | 'e' -> true
  | 'i' -> true
  | 'o' -> true
  | 'u' -> true
  | _   -> false

#+END_SRC

#+RESULTS:
: <fun>


#+BEGIN_SRC ocaml
let iscowel c = 
  match c with
    'a' | 'e' | 'i' | 'o'| 'u' -> true
    | _ -> false
             

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
let rec gcd a b = 
  if b = 0 then a else gcd b (a mod b)

#+END_SRC

#+RESULTS:
: <fun>


#+BEGIN_SRC ocaml
let rec gcd a b = 
  match b with
    0 -> a
  | _ -> gcd b (a mod b)

#+END_SRC

#+RESULTS:
: <fun>

We use pattern mathcing whenever it is easier to read and understand
than if then else expressions


#+BEGIN_SRC ocaml
let not x = 
  match x with
    x -> false
  | _ -> true;;

#+END_SRC

#+RESULTS:
: <fun>

* Sorting Things

#+BEGIN_SRC ocaml

let rec insert x l =
  match l with
    [] -> [x]
  | h::t -> 
     if x <= h
       then x :: h :: t
       else h :: insert x t

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
insert 39 [1; 1; 2; 3; 5; 9];;

#+END_SRC

#+RESULTS:
| 1 | 1 | 2 | 3 | 5 | 9 | 39 |


#+BEGIN_SRC ocaml
let rec sort l = 
  match l with
    [] -> []
  | h::t -> insert h (sort t)

#+END_SRC

#+RESULTS:
: <fun>


#+BEGIN_SRC ocaml
sort [53; 9; 2; 6; 19]

#+END_SRC

#+RESULTS:
| 2 | 6 | 9 | 19 | 53 |


sort [53; 9; 2; 6; 19]

insert 53 (sort [9; 2; 6; 19])

insert 53 (insert 9 (sort [2; 6; 19])))

insert 53 (insert 9 (insert 2 sort [6; 19]))

insert 53 (insert 9 (insert 2 (insert 6 (sort [19]))))

insert 53 (insert 9 (insert 2 (insert 6 (insert 19 []))))

insert 53 (insert 9 (insert 2 (insert 6 [19]))

insert 53 (insert 9 (insert 2 [6; 19]))

insert 53 (insert 9  [2; 6; 19])

insert 53 [2; 6; 9; 19]

[2; 6; 9; 19; 53]


#+BEGIN_SRC ocaml
sort ['p'; 'i'; 'm'; 'c'; 's'; 'h'];;

#+END_SRC

#+RESULTS:
| c | h | i | m | p | s |

sort function takes time proportional to n^2

#+BEGIN_SRC ocaml

let rec merge x y =
  match x, y with
    [], l -> l
  | l, [] -> l
  | hx::tx, hy::ty ->
     if hx < hy
       then hx :: merge tx (hy :: ty)
       else hy :: merge (hx :: tx) ty

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
let rec length l = 
  match l with
    [] -> 0
  | _::t -> 1 + length t

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
let rec msort l = 
  match l with 
    [] -> []
  | [x] -> [x]
  | _ -> 
     let left = take (length 1 / 2) l in 
     let right = drop  (length 1 / 2) l in 
     merge (msort left) (msort right)

#+END_SRC

#+RESULTS:
: Characters 102-103:
:        let left = take (length 1 / 2) l in 
:                                ^
: Error: This expression has type int but an expression was expected of type
:          'a list

* COMMENT “Loading a Program from a File”


#+BEGIN_SRC ocaml
let rec length l = 
  match l with
    [] -> 0
  | h::t -> 1 + length t;;

let rec append a b = 
  match a with
    [] -> b
  | h::t -> h :: append t b;;

#+END_SRC

#+RESULTS:
: <fun>

* Functions upon Functions upon Functions


#+BEGIN_SRC ocaml
let rec double l = 
  match l with
    [] -> [] 
  | h::t -> (h * 2) :: double t;;

#+END_SRC

#+RESULTS:
: <fun>


#+BEGIN_EXAMPLE
double [1; 2; 4]

2 :: double [2; 4]

2 :: 4 :: double [4]

2 :: 4 :: 8 :: double []

2 :: 4 :: 8 :: []

[2; 4; 8]
#+END_EXAMPLE


#+BEGIN_SRC ocaml

let rec evens l = 
  match l with
    [] -> []
  | h::t -> (h mod 2 = 0) :: evens t

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
evens [1; 2; 4]

#+END_SRC

#+RESULTS:
| false | true | true |


#+BEGIN_SRC ocaml
let rec map f l = 
  match l with
    [] -> [] 
  | h::t -> f h :: map f t

#+END_SRC

#+RESULTS:
: <fun>

val map : ('a -> 'b) -> 'a list -> 'b list = <fun>


#+BEGIN_SRC ocaml
let halve x = x / 2

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml


map halve [10; 20; 30]
#+END_SRC

#+RESULTS:
| 5 | 10 | 15 |

#+BEGIN_EXAMPLE
map halve [10; 20; 30]

5 :: map halve [20; 30]

5 :: 10 :: map halve [30]

5 :: 10 :: 15 :: map halve []

5 :: 10 :: 15 :: []

[5; 10; 15]
#+END_EXAMPLE


#+BEGIN_SRC ocaml
let is_even x = 
  x mod 2 = 0

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
let evens l = 
  map (fun x -> x mod 2 = 0) l

#+END_SRC

#+RESULTS:
: <fun>



#+BEGIN_SRC ocaml
map (fun x -> x / 2) [10; 20; 30]

#+END_SRC

#+RESULTS:
| 5 | 10 | 15 |

val merge : ('a -> 'a -> bool) -> 'a list -> 'a list -> 'a list = <fun>

val msort : ('a -> 'a -> bool) -> 'a list -> 'a list = <fun>

type a -> a -> bool . That is ,it takes two elements of the same type , and 
return true, if the first is "greater" than the second


#+BEGIN_SRC ocaml
let rec merge cmp x y = 
  match x, y with 
    [], l -> l
  | l, [] -> l
  | hx::tx, hy::ty ->
     if cmp hx hy
        then hx :: merge cmp tx (hy :: ty)
        else hy :: merge cmp (hx :: tx) ty
                     
                     

#+END_SRC

#+RESULTS:
: <fun>


#+BEGIN_SRC ocaml
let rec msort cmp l = 
  match l with 
    [] -> []
  | [x] -> [x]
  | _ -> 
     let left = take (length l / 2) l in
       let right = drop (length l / 2) l in 
         merge cmp (msort cmp left) (msort cmp right)

#+END_SRC

#+RESULTS:
: <fun>


#+BEGIN_SRC ocaml

let greater a b = 
  a >= b

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
msort greater [5; 4; 6; 2; 1]

#+END_SRC

#+RESULTS:
| 6 | 5 | 4 | 2 | 1 |


#+BEGIN_SRC ocaml
( <= )

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
msort ( <= ) [5; 4; 6; 2; 1]

#+END_SRC

#+RESULTS:
| 1 | 2 | 4 | 5 | 6 |

#+BEGIN_SRC ocaml
msort ( >= ) [5; 4; 6; 2; 1]

#+END_SRC

#+RESULTS:
| 6 | 5 | 4 | 2 | 1 |


* When Things Go Wrong

* Looking Things Up

| House | People |
|-------+--------|
|     1 |      4 |
|     2 |      2 |
|     3 |      2 |
|     4 |      3 |
|     5 |      1 |
|     6 |      2 |
|       |        |


To make a pair in OCaml

#+BEGIN_SRC ocaml
let p = (1, 4)

#+END_SRC

#+RESULTS:
: (1, 4)

val p : int * int = (1, 4)


#+BEGIN_SRC ocaml
let q = (1, '1')

#+END_SRC

#+RESULTS:
: (1, '1')

val q : int * char = (1, '1')


#+BEGIN_SRC ocaml
let fst p = match p with (x, _) -> x;;
let snd p = match p with (_, y) -> y;;

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
fst (1, 'a')

#+END_SRC

#+RESULTS:
: 1


#+BEGIN_SRC ocaml 
snd (7, 'a')

#+END_SRC

#+RESULTS:
: 'a'


#+BEGIN_SRC ocaml
let census = [(1, 4); (2, 2); (3, 2); (4, 3); (5, 1); (6, 2)]

#+END_SRC

#+RESULTS:
:   [(1, 4), (2, 2), (3, 2), (4, 3), (5, 1), (6, 2)]

val census : (int * int) list =

#+BEGIN_SRC ocaml
let y = (1, [2; 3; 4])

#+END_SRC

#+RESULTS:
| 1 | (2 3 4) |

lookup :a -> (axb) list -> b

#+BEGIN_SRC ocaml
let rec lookup x l = 
  match l with
    [] -> raise Not_found
  | (k, v)::t ->
     if k = x then v else lookup x t
#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
let rec add k v d = 
  match d with
    [] -> [(k, v)]
  | (k', v')::t ->
     if k = k'
        then (k, v) :: t
        else (k', v') :: add k v t    
#+END_SRC

#+RESULTS:
: <fun>


#+BEGIN_SRC ocaml
add 8 2 [(4, 5); (6, 3)]

#+END_SRC



| 4 | 5 |
| 6 | 3 |
| 8 | 2 |


* More with Functions

#+BEGIN_SRC ocaml
let add x y = x + y

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
let f = add 6

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml 

f 5

#+END_SRC

#+RESULTS:
: 11


#+BEGIN_SRC ocaml

map (add 6) [10; 20; 30]

#+END_SRC


| 16 | 26 | 36 |


#+BEGIN_SRC ocaml

map (fun x -> x * 2) [10; 20; 30]

#+END_SRC

#+RESULTS:
| 20 | 40 | 60 |


* New Kinds of Data

The name of type is colour. It has four constructors, Red, Green, and Yellow


#+BEGIN_SRC ocaml

type colour = Red | Green | Blue | Yellow

#+END_SRC

#+RESULTS:
: type colour = Red | Green | Blue | Yellow


#+BEGIN_SRC ocaml
let col = Blue

let cols = [Red; Red; Green; Yellow]
             
let colpair = ('R', Red)

#+END_SRC

#+RESULTS:
: ('R', Red)


#+BEGIN_SRC ocaml
type colour = 
  Red
| Green
| Blue
| Yellow
| RGB of int * int * int

#+END_SRC

#+RESULTS:
: type colour = Red | Green | Blue | Yellow | RGB of int * int * int

#+BEGIN_SRC ocaml
let cols = [Red; Red; Green; Yellow; RGB (150, 0, 255);]

#+END_SRC

#+RESULTS:
| Red | Red | Green | Yellow | RGB | (150 0 255) |

我们可用 Pattern matching 的 functions 来代替新的 Type

We can write functions by pattern matching over our new type

#+BEGIN_SRC ocaml
let components c = 
  match c with 
    Red -> (255, 0, 0)
  | Green -> (0, 255, 0)
  | Blue -> (0, 0, 255)
  | Yellow -> (255, 255, 0)
  | RGB (r, g, b) -> (r, g, b)

#+END_SRC

#+RESULTS:
: <fun>

Type could be polymorphic. 

#+BEGIN_SRC ocaml
type 'a option = None | Some of 'a

#+END_SRC

#+RESULTS:
: type 'a option = None | Some of 'a

We can read as "a value of type a optio is either nothing, or something of type a"

#+BEGIN_SRC ocaml
let nothing = None

let number = Some 50
               
let numbers = [Some 12; None; None; Some 2]
                
let word = Some ['c'; 'a'; 'k'; 'e']

#+END_SRC

#+RESULTS:
: Some ['c', 'a', 'k', 'e']


Here is a function to look up a value in a dictionary, return None, instead of
raising an exception if the value is not found

#+BEGIN_SRC ocaml

let rec lookup_opt x l = 
  match l with
    [] -> None
  | (k, v)::t -> if x = k then Some v else lookup_opt x t
#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
type 'a sequence = Nil | Cons of 'a * 'a sequence

#+END_SRC

#+RESULTS:
: type 'a sequence = Nil | Cons of 'a * 'a sequence


| Built-in                | Ours                                      | Our Type       |
|-------------------------+-------------------------------------------+----------------|
| []                      | Nil                                       | a sequence     |
| [1]                     | Cons (1, Nil)                             | int sequence   |
| ['a'; 'x'; 'e']         | Cons ('a', Cons ('x', Cons ('e', Nil)))   | char sequence  |
| [Red; RGB (20, 20, 20)] | COns (Red, Cons (RGB (20, 20 , 20), Nil)) | color sequence |

#+BEGIN_SRC ocaml
let rec length l = 
  match l with
    [] -> 0
  | _::t -> 1 + length t
                  
let rec append a b =
  match a with 
    [] -> b
  | h::t -> h :: append t b

#+END_SRC

#+RESULTS:
: <fun>

Web can creat same functions with new sequence type:

#+BEGIN_SRC ocaml
let rec length s = 
  match s with
    Nil -> 0
  | Cons (_, t) -> 1 + length t
                         
let rec append a b = 
  match a with
    Nil -> b
  | Cons (h, t) -> Cons (h, append t b)

#+END_SRC

#+RESULTS:
: <fun>


** A Type for Mathematical Expressions

#+BEGIN_SRC ocaml
type expr = 
  Num of int 
| Add of expr * expr
| Subtract of expr * expr
| Multiply of expr * expr
| Divide of expr * expr

#+END_SRC

#+RESULTS:
: type expr =
:     Num of int
:   | Add of expr * expr
:   | Subtract of expr * expr
:   | Multiply of expr * expr
:   | Divide of expr * expr

#+BEGIN_SRC ocaml
Add (Num 1, Multiply (Num 2, Num 3))

#+END_SRC

#+RESULTS:
: Add (Num 1, Multiply (Num 2, Num 3))

Wen can write a same function

#+BEGIN_SRC ocaml
let rec evaluate e = 
  match e with
    Num x -> x
  | Add (e, e') -> evaluate e + evaluate e'
  | Subtract (e, e') -> evaluate e - evaluate e'
  | Multiply (e, e') -> evaluate e * evaluate e'
  | Divide (e, e') -> evaluate e / evaluate e'

#+END_SRC

#+RESULTS:
: <fun>


* Growing Trees

#+BEGIN_SRC ocaml
type 'a tree = 
  Br of 'a * 'a tree * 'a tree
| Lf

#+END_SRC

#+RESULTS:
: type 'a tree = Br of 'a * 'a tree * 'a tree | Lf

Two constructors

1. Br 
2. Lf (leaf)
   
The empty tree is simply

#+BEGIN_SRC ocaml
let rec size tr = 
  match tr with
    Br (_, l, r) -> 1 + size l + size r
  | Lf -> 0

#+END_SRC

#+RESULTS:
: <fun>


A similar function can be used to add up all the integers in an int tree.

#+BEGIN_SRC ocaml
let rec total tr = 
  match tr with
    Br (x, l, r) -> x + total l + total r
  | Lf -> 0

#+END_SRC

#+RESULTS:
: <fun>


Calculate the maximum depth fo tree.

#+BEGIN_SRC ocaml
let max x y = 
  if x > y then x else y;;

let rec maxdepth tr = 
  match tr with
    Br (_, l, r) -> 1 + max (maxdepth l) (maxdepth r)
  | Lf -> 0

#+END_SRC

#+RESULTS:
: <fun>

Exract all of the elements from a tree into a list

#+BEGIN_SRC ocaml
let rec list_of_tree tr = 
  match tr with
    Br (x, l, r) -> list_of_tree l @ [x] @ list_of_tree r
  | Lf -> []

#+END_SRC

#+RESULTS:
: <fun>

** Usring trees to build better dictionaries

The most important advantage of a tree is that if is often very much easier to
reach a given element.

#+BEGIN_SRC ocaml
let rec lookup tr k = 
  match tr with
    Lf -> raise Not_found
  | Br ((k', v), l, r) -> 
     if k = k' then v
     else if k < k' then lookup l k
     else lookup r k

#+END_SRC

#+RESULTS:
: <fun>


#+BEGIN_SRC ocaml
let rec insert tr k v = 
  match tr with
    Lf -> Br ((k, v), Lf, Lf)
  | Br ((k', v'), l, r) ->
     if k = k' then Br ((k', v'), l, r)
     else if k < k' then Br ((k', v'), insert l k v, r)
     else Br ((k', v'), l, insert r k v)


#+END_SRC

#+RESULTS:
: <fun>


* In and Out

#+BEGIN_SRC ocaml :results value
print_int 100;;
#+END_SRC

#+RESULTS:
: ()


#+BEGIN_SRC ocaml
let print_dict_entry (k, v) = 
  print_int k; 
  print_newline (); 
  print_string v ; 
  print_newline ()

#+END_SRC

#+RESULTS:
: <fun>

  val print_dict_entry : int * string -> unit = <fun>

#+BEGIN_SRC ocaml
print_dict_entry (1, "one");;

#+END_SRC

#+RESULTS:
: ()

1
one
- : unit = ()
  

We could write our own function to literate over all the entries

#+BEGIN_SRC ocaml
let rec print_dict d = 
  match d with
    [] -> ()
  | h::t -> print_dict_entry h; print_dict t

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
let rec iter f l = 
  match l with
    [] -> ()
  | h::t -> f h; iter f t

#+END_SRC

#+RESULTS:
: <fun>

      val iter : ('a -> 'b) -> 'a list -> unit = <fun>


#+BEGIN_SRC ocaml
let print_dict d 
      iter print_dict_entry d;;
      
      
let print_dict = 
  iter print_dict_entry

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
print_dict [(1, "one"); (2, "two"); (3, "three")];;

#+END_SRC

#+RESULTS:
: ()

*** Read from the keyboard

#+BEGIN_SRC ocaml
let rec read_dict () = 
  let i = read_int () in
    if  i = 0 then [] else
      let name = read_line () in 
        (i, name) :: read_dict ();;

#+END_SRC

#+RESULTS:
: <fun>


* Putting Things in Boxes

Pure function which have no side-effects.
OCaml provides a construct known as a reference which is a box
in which we can store a value. we build a reference using the 
built-in function ref of type a->a ref.

#+BEGIN_SRC ocaml
let x = ref 0;;

#+END_SRC

#+RESULTS:
: {contents = 0}

OCaml tell us that x is a *reference* of type *int ref* which current has
contents , We can extract the current contents of a reference using the
!operator, which has type a ref -> a

#+BEGIN_SRC ocaml
let p = !x;;
#+END_SRC

#+RESULTS:
: 0

#+BEGIN_SRC ocaml
x := 50

#+END_SRC

#+RESULTS:
: ()

#+BEGIN_SRC ocaml
let q = !x;;

#+END_SRC

#+RESULTS:
: 50

#+BEGIN_SRC ocaml
p;;

#+END_SRC

#+RESULTS:
: 0

:=  operator has a type ref -> a -> unit, Which means update value

Notice that p is unchanged.


#+BEGIN_SRC ocaml
let swap a b = 
  let t = !a in 
    a := !b; b := t

#+END_SRC

#+RESULTS:
: <fun>

*** Doing it again and again

#+BEGIN_SRC ocaml
for x = 1 to 5 do print_int x; print_newline () done 

#+END_SRC

#+RESULTS:
: ()

1
2
3
4
5
- : unit = ()
  
#+BEGIN_SRC ocaml
let channe_statistics in_channel = 
  let lines = ref 0 in
    try
      while true do
        let line = input_line in_channel in 
          lines := !lines + 1
      done
    with
      End_of_file ->
        print_string "There were";
        print_int !lines;
        print_string " lines.";
        print_newline ();;
          
let file_statistics name =
  let channel = open_in name in 
    try 
      file_statistics_channel channel;
      close_in channel
    with
      _ -> close_in channel
        
#+END_SRC

#+RESULTS:
: Characters 86-109:
:         file_statistics_channel channel;
:         ^^^^^^^^^^^^^^^^^^^^^^^
: Error: Unbound value file_statistics_channel

#+BEGIN_SRC ocaml
(* Final version of word counter *)
let print_histogram arr =
  print_string "Character frequencies:";
  print_newline ();
  for x = 0 to 255 do
    if arr.(x) > 0 then
      begin
        print_string "For character '";
        print_char (char_of_int x);
        print_string "' (character number ";
        print_int x;
        print_string ") the count is ";
        print_int arr.(x);
        print_string ".";
        print_newline ()
      end
  done

let channel_statistics in_channel =
  let lines = ref 0
  and characters = ref 0
  and words = ref 0
  and sentences = ref 0
  and histogram = Array.make 256 0 in
    try
      while true do
        let line = input_line in_channel in
          lines := !lines + 1;
          characters := !characters + String.length line;
          String.iter
            (fun c ->
               match c with
               '.' | '?' | '!' -> sentences := !sentences + 1
               | ' ' -> words := !words + 1
               | _ -> ())
            line;
          String.iter
            (fun c ->
              let i = int_of_char c in
                histogram.(i) <- histogram.(i) + 1)
            line
      done
    with
      End_of_file ->
        print_string "There were ";
        print_int !lines;
        print_string " lines, making up ";
        print_int !characters;
        print_string " characters with ";
        print_int !words;
        print_string " words in ";
        print_int !sentences;
        print_string " sentences.";
        print_newline ();
        print_histogram histogram

let file_statistics name =
  let channel = open_in name in
    try
      channel_statistics channel;
      close_in channel
    with
      _ -> close_in channel
#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
file_statistics "gregor.txt"

#+END_SRC

#+RESULTS:
: Exception: Sys_error "gregor.txt: No such file or directory".
: Raised by primitive operation at file "pervasives.ml", line 385, characters 28-54
: Called from file "//toplevel//", line 393, characters 16-28
: Called from file "toplevel/toploop.ml", line 180, characters 17-56

* The Other Number

#+BEGIN_SRC ocaml
1.5

#+END_SRC

#+RESULTS:
: 1.5

#+BEGIN_SRC ocaml
6.

#+END_SRC

#+RESULTS:
: 6

#+BEGIN_SRC ocaml
1.0 +. 2.5

#+END_SRC

#+RESULTS:
: 3.5

#+BEGIN_SRC ocaml
1.0 /. 100000.

#+END_SRC

#+RESULTS:
1e-05

#+BEGIN_SRC ocaml
max_float

#+END_SRC

#+RESULTS:

1.7976931348623157e+308

#+BEGIN_SRC ocaml
sqrt 9.

#+END_SRC

#+RESULTS:
: 3

#+BEGIN_SRC ocaml
let make_vector (x0, y0) (x1, y1) = 
  (x1-. x0, y1 -. y0)

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
let vector_length (x, y) = 
  sqrt (x *. x +. y *. y)

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
let offset_point (x, y) (px, py) = 
  (px +. x, py +. y)

#+END_SRC

#+RESULTS:
: <fun>

* The OCaml Standard Library

#+BEGIN_SRC ocaml
List.length [1; 2; 3; 4; 5];;

#+END_SRC

#+RESULTS:
: 5

#+BEGIN_SRC ocaml
List.nth [1; 2; 4; 8; 16] 3

#+END_SRC

#+RESULTS:
: 8


* Building Bigger Programs


#+BEGIN_SRC ocaml
type stats = int * int * int * int;;

let stats_from_channel _= (0, 0, 0, 0);;

let stats_from_file filename = 
  let  channel = open_in filename in
    let result = stats_from_channel channel in 
      close_in channel
      result

#+END_SRC

#+RESULTS:
: Characters 124-132:
:         close_in channel
:         ^^^^^^^^
: Error: This function has type in_channel -> unit
:        It is applied to too many arguments; maybe you forgot a `;'.


