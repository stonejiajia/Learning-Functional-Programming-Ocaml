#+TITLE: Ocaml_basic

* Tuples List Options, and Pattern Matching

#+BEGIN_SRC ocaml


open Base;;
#+END_SRC

#+RESULTS:
: Characters 7-11:
:   open Base;;;;
:        ^^^^
: Error: Unbound module Base

** Tuples 

Tuples 里有不同类型的元素

#+BEGIN_SRC ocaml
let a_tuple = (3,"three");;

#+END_SRC

#+RESULTS:
: (3, "three")

#+BEGIN_SRC ocaml ：results output
let another_tuple = (3, "four", 5);;

#+END_SRC

#+RESULTS:
: (3, "four", 5)


Tuples using Ocaml's pattern-matching

#+BEGIN_SRC ocaml :results output 
let (x,y) = a_tuple;;
#+END_SRC

#+RESULTS:
: val x : int = 3

#+BEGIN_SRC ocaml
x + String.length y;;
#+END_SRC

#+RESULTS:
: 8

Pattern matching can also show up in function arguments

#+BEGIN_SRC ocaml
let distance (x1, y1) (x2, y2) = 
  sqrt ((x1 -. x2) ** 2. +. (y1 -. y2) ** 2.)

#+END_SRC

#+RESULTS:
: <fun>

RESULTS: 
val distance : float * float -> float * float -> float = <fun>

* List

List 中的元素必须是相同的 Type

#+BEGIN_SRC ocaml
let languages = ["Ocaml";"perl";"C"];;

#+END_SRC

#+RESULTS:
| Ocaml | perl | C |

#+BEGIN_SRC ocaml
let numbers = [3;"four";5];;

#+END_SRC

#+RESULTS:
: Characters 17-23:
:   let numbers = [3;"four";5];;;;
:                    ^^^^^^
: Error: This expression has type string but an expression was expected of type
:          int


** The List module

#+BEGIN_SRC ocaml

List.length languages;;

#+END_SRC

#+RESULTS:
: 3


#+BEGIN_SRC ocaml
List.map languages ~f:String.length;;

#+END_SRC

#+RESULTS:
: Characters 22-35:
:   List.map languages ~f:String.length;;;;
:                         ^^^^^^^^^^^^^
: Error: The function applied to this argument has type 'a list -> 'b list
: This argument cannot be applied with label ~f

Constructing lists with::
#+BEGIN_SRC ocaml
"French" :: "Spanish" :: languages;;

#+END_SRC

#+RESULTS:
| French | Spanish | Ocaml | perl | C |

注：
List 用 ； 来分割元素
Tuple 用 ， 来分割元素

两个 List 连接用 @ 而不是 ::

#+BEGIN_SRC ocaml
[1;2;3] @ [4;5;6];;


#+END_SRC

#+RESULTS:
| 1 | 2 | 3 | 4 | 5 | 6 |

** List patterns using match

#+BEGIN_SRC ocaml
let my_favorite_language (my_favorite :: the_rest) = 
  my_favorite
;;

#+END_SRC

#+RESULTS:
: <fun>

    Characters 25-67:
  .........................(my_favorite :: the_rest) = 
    my_favorite
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
[]
val my_favorite_language : 'a list -> 'a = <fun>


这个类似于 Lisp 中的 cdr 和 car

#+BEGIN_SRC emacs-lisp

(car '(1 2 3))

#+END_SRC

#+RESULTS:
: 1

#+BEGIN_SRC emacs-lisp

(cdr '(1 2 3 4))

#+END_SRC

#+RESULTS:
| 2 | 3 | 4 |

#+BEGIN_SRC ocaml
my_favorite_language ["English";"Spanish";"French"];;

#+END_SRC

#+RESULTS:
: English

** Match 


#+BEGIN_SRC ocaml

let my_favorite_language languages = 
  match languages with
  | first :: the_rest -> first
  | [] -> "Ocaml" (* A good default*)

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml

my_favorite_language ["English";"Spanish";"French"];;

#+END_SRC

#+RESULTS:
: English

** Recursive list functions


#+BEGIN_SRC ocaml
let rec sum l = 
  match l with
  | [] -> 0
  | hd :: tl -> hd + sum tl

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
sum [1;2;3];; 

#+END_SRC

#+RESULTS:
: 6

#+BEGIN_SRC ocaml

let rec destutter list = 
  match list with
  | [] -> []
  | hd1 :: hd2 :: tl -> 
     if hd1 = hd2 then destutter (hd2 :: tl)
     else hd1 :: destutter (hd2 :: tl)
;;

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
let rec destutter list = 
  match list with
  | [] -> []
  | [hd] -> [hd]
  | hd1 :: hd2 :: tl ->
     if hd1 = hd2 then destutter (hd2 :: tl)
     else hd1 :: destutter (hd2 :: tl)
;;

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
destutter ["hey";"hey";"hey";"man"]

#+END_SRC

#+RESULTS:
| hey | man |

** Options

#+BEGIN_SRC ocaml
let divide x y = 
  if y = 0 then None else Some (x/y);;

#+END_SRC

#+RESULTS:
: <fun>

把 Options 想象成特殊的 List ，这 List 里最多只有一个元素。


#+BEGIN_SRC ocaml
open Core.Std;;

let log_entry maybe_time message = 
  let time = 
    match maybe_time with
    | Some x -> x
    | None -> Time.now()
  in 
  Time.to_sec_string time ^ "__" ^ message
;;

#+END_SRC

#+RESULTS:
: Characters 128-151:
:     Time.to_sec_string time ^ "__" ^ message
:     ^^^^^^^^^^^^^^^^^^^^^^^
: Error: This expression has type
:          zone:Core.Std.Time.Zone.t -> Core_kernel__.Import.string
:        but an expression was expected of type string


*** in 
let 表达式中有 in 时，in 用来建立一个新的 scope（作用域）在 let 的作用域里。

#+BEGIN_SRC ocaml
let x = 7 in
    x + x;;

#+END_SRC

#+RESULTS:
: 14

#+BEGIN_SRC ocaml
x
#+END_SRC

#+RESULTS:
: Characters 0-1:
:   x;;
:   ^
: Error: Unbound value x

** Records and Variants

#+BEGIN_SRC ocaml

type point2d = { x : float; y : float};;

#+END_SRC

#+RESULTS:
: type point2d = { x : Base.float; y : Base.float; }

#+BEGIN_SRC ocaml
let p = { x = 3.; y = -4. };;

#+END_SRC

#+RESULTS:
: {x = 3.; y = -4.}


#+BEGIN_SRC ocaml
let magnitude { x = x_pos; y = y_pos } =
  sqrt (x_pos **2. +. y_pos ** 2.);;

#+END_SRC

#+RESULTS:
: <fun>

val magnitude : point2d -> float = <fun>

field punning 可以跟简洁的写成这种形式。

#+BEGIN_SRC ocaml
let magnitude { x; y } = sqrt ( x ** 2. +. y ** 2.);;

#+END_SRC

#+RESULTS:
: <fun>
val magnitude : point2d -> float = <fun>

#+BEGIN_SRC ocaml

let distance v1 v2 = 
  magnitude { x = v1.x -. v2.x; y = v1.y -. v2.y };;

#+END_SRC

#+RESULTS:
: <fun>


#+BEGIN_SRC ocaml
type circle_desc = { center: point2d; radius: float }
type rect_desc = { lower_left: point2d; width: float; height: float }
type segment_desc = { endpoint1: point2d; endpoint2: point2d };;

#+END_SRC

#+RESULTS:
: type circle_desc = { center : point2d; radius : Base.float; }
: type rect_desc = {
:   lower_left : point2d;
:   width : Base.float;
:   height : Base.float;
: }
: type segment_desc = { endpoint1 : point2d; endpoint2 : point2d; }

variant type 的方式把上面的三个 object 结合起来。

#+BEGIN_SRC ocaml

type sene_element =
  | Circle  of circle_desc
  | Rect    of rect_desc
  | Segment of segment_desc
;;

#+END_SRC

#+RESULTS:
: type sene_element =
:     Circle of circle_desc
:   | Rect of rect_desc
:   | Segment of segment_desc


“|” 分割不同的 Case, 每个 Case 都有一个 capitalized tag

#+BEGIN_SRC ocaml

let is_inside_scene_element point scene_element =
  let open Float.O in
  match scene_element with
  | Circle { center; radius } ->
    distance center point < radius
  | Rect { lower_left; width; height } ->
    point.x    > lower_left.x && point.x < lower_left.x + width
    && point.y > lower_left.y && point.y < lower_left.y + height
  | Segment { endpoint1; endpoint2 } -> false

#+END_SRC

#+RESULTS:
: <fun>

val is_inside_scene_element : point2d -> sene_element -> bool = <fun>

#+BEGIN_SRC ocaml
let is_inside_scene point scene = 
  List.exists scene
    ~f:(fun el -> is_inside_scene_element point el)
;;

#+END_SRC

#+RESULTS:
: <fun>


#+BEGIN_SRC ocaml
is_inside_scene {x=3.;y=7.}
  [ Circle {center = {x=4.;y= 4.}; radius = 0.5} ];;

#+END_SRC

#+RESULTS:
: false

#+BEGIN_SRC ocaml
is_inside_scene {x=3.;y=7.}
  [ Circle {center = {x=4.;y= 4.}; radius = 5.0} ];;

#+END_SRC

#+RESULTS:
: true


* Imperative Programming

** Arrays

#+BEGIN_SRC ocaml
let numbers = [| 1; 2; 3; 4|];; 

#+END_SRC

#+RESULTS:
| 1 | 2 | 3 | 4 |

Arrays 和 Python 一样， 从 0 开始

#+BEGIN_SRC ocaml 
numbers.(2) <- 4;;

#+END_SRC

#+RESULTS:
: ()

#+BEGIN_SRC ocaml
numbers;;

#+END_SRC

#+RESULTS:
| 1 | 2 | 4 | 4 |


** Mutable Record Fields

#+BEGIN_SRC ocaml
type running_sum =
  {
    mutable sum: float;
    mutable sum_sq: float;
    mutable samples: int;
  }
;;
#+END_SRC

#+RESULTS:
: type running_sum = {
:   mutable sum : Base.float;
:   mutable sum_sq : Base.float;
:   mutable samples : Base.int;
: }




#+BEGIN_SRC ocaml 
let mean rsum = rsum.sum /. Float.of_int rsum.samples
let stdev rsum =
  Float.sqrt (rsum.sum_sq /. Float.of_int rsum.samples
              -. (rsum.sum /. Float.of_int rsum.samples) **. 2.) ;;

#+END_SRC

#+RESULTS:
: <fun>


#+BEGIN_SRC ocaml

let create () = { sum = 0.; sum_sq = 0.; samples = 0 }
let update rsum x =
  rsum.samples <- rsum.samples + 1;
  rsum.sum     <- rsum.sum     +. x;
  rsum.sum_sq  <- rsum.sum_sq  +. x *. x
;;
#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml

let rsum = create ();;

#+END_SRC

#+RESULTS:
: {sum = 0.; sum_sq = 0.; samples = 0}

#+BEGIN_SRC ocaml

List.iter [1.;3.;2.;-7.;4.;5.] ~f:(fun x -> update rsum x);; 

#+END_SRC

#+RESULTS:
: ()


#+BEGIN_SRC ocaml

mean rsum;;

#+END_SRC

#+RESULTS:
: 1.3333333333333333

#+BEGIN_SRC ocaml

stdev rsum;;

#+END_SRC

#+RESULTS:
: 3.94405318873307698

* Refs

#+BEGIN_SRC ocaml

let x = { contents = 0 };;

#+END_SRC

#+RESULTS:
: {contents = 0}

#+BEGIN_SRC ocaml

x.contents <- x.contents + 1;;

#+END_SRC

#+RESULTS:
: ()

#+BEGIN_SRC ocaml
x;;

#+END_SRC

#+RESULTS:
: {contents = 1}

#+BEGIN_SRC ocaml

let x = ref 0

#+END_SRC

#+RESULTS:
: {contents = 0}

#+BEGIN_SRC ocaml
!x;;

#+END_SRC

#+RESULTS:
: 0

#+BEGIN_SRC ocaml

x := !x + 1;; (* assignment, i.e., x.contents <- ......*);;
!x;;

#+END_SRC

#+RESULTS:
: 3

#+BEGIN_SRC ocaml

type 'a ref = { mutable contents : 'a }
                
let ref x = { contents = x }
let (!) r = r.contents
let (:=) r x = r.contents <- x
;;
#+END_SRC

#+RESULTS:
: <fun>


#+BEGIN_SRC ocaml
let sum list = 
  let sum = ref 0 in 
  List.iter list ~f:(fun x -> sum := !sum + x);
  !sum
;;

#+END_SRC

#+RESULTS:
: <fun>


* COMMENT For and While Loops

#+BEGIN_SRC ocaml
let permute array = 
  let length = Array.length array in
  for i = 0 to length - 2 do
    (* pick a j to swap with*)
    let j = i + Random.int (length - i) in
    let tmp = array.(i) in
    array.(i) <- array.(j);
    array.(j) <- tmp
done
;;
    

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml

let ar = Array.init 20 ~f:(fun i -> i);;


#+END_SRC

#+RESULTS:
:   [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]

#+BEGIN_SRC ocaml

permute ar;;

ar

#+END_SRC

#+RESULTS:
| 16 | 9 | 6 | 14 | 11 | 8 | 4 | 17 | 15 | 19 | 5 | 2 | 13 | 1 | 18 | 12 | 0 | 3 | 7 | 10 |

#+BEGIN_SRC ocaml
let find_first_negative_entry array = 
  let pos = ref 0 in 
  while !pos < Array.length array && array.(!pos) >= 0 do
    pos := !pos + 1
  done;
  if !pos = Array.length array then None else Some !pos
;;

#+END_SRC

#+RESULTS:
: <fun>


#+BEGIN_SRC ocaml

find_first_negative_entry [|1;2;0;3|];;

#+END_SRC

#+RESULTS:
: None

#+BEGIN_SRC ocaml

find_first_negative_entry [|1;-2;0;3|];; 

#+END_SRC

#+RESULTS:
: Some 1

expr1 && expr2, expr2 will only be evaluated if expr evaluated to true


#+BEGIN_SRC ocaml

let find_first_negative_entry array = 
  let pos = ref 0 in 
  while 
    let pos_is_good = !pos < Array.length array in
    let element_is_non_negative = array.(!pos) >= 0 in
    pos_is_good && element_is_non_negative
  do
    pos := !pos + 1
  done;
  if !pos = Array.length array then None else Some !pos
;;

#+END_SRC

#+RESULTS:
: <fun>

* A Complete Program

#+BEGIN_SRC ocaml

open Core.Std

let rec read_and_accumulate accum = 
  let line = In_channel.input_line In_channel.stdin in
  match line with
  | None -> accum
  | Some x -> read_and_accumulate (accum +. Float.of_string x)

let () = 
  printf "Total: %F\n" (read_and_accumulate 0.);;

#+END_SRC

#+RESULTS:
: Characters 6-14:
:   open Core.Std
:        ^^^^^^^^
: Warning 3: deprecated: module Core.Std
: [since 2017-02] Use Core. The Std sub-module is no longer needed
: Characters -1--1:
:   
:   
: Error: Reference to undefined global `Core__Std0'
