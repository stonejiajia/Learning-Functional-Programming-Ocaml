#+TITLE: List and Patterns

* List Basics

#+BEGIN_SRC ocaml
open Base;;

[1;2;3]
#+END_SRC

#+RESULTS:
| 1 | 2 | 3 |

#+BEGIN_SRC ocaml
1 :: 2 :: [] 
#+END_SRC

#+RESULTS:
| 1 | 2 |

:: operator is right-associative, means the we can build up lists without
parenthese

#+BEGIN_SRC ocaml
let empty = [];;
3 :: empty

#+END_SRC

#+RESULTS:
| 3 |

#+BEGIN_SRC ocaml
"three" :: empty;;

#+END_SRC

#+RESULTS:
| three |


#+BEGIN_SRC ocaml
let l = 1 :: 2 :: 3 :: []

#+END_SRC

#+RESULTS:
| 1 | 2 | 3 |

#+BEGIN_SRC ocaml

let m = 0 :: l

#+END_SRC

#+RESULTS:
| 0 | 1 | 2 | 3 |

* Using Patterns to Extract Data from a List

#+BEGIN_SRC ocaml
let rec sum l = 
  match l with
  | [] -> 0
  | hd :: tl -> hd + sum tl

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
sum [1;2;3;2;3;4;5;9]

#+END_SRC

#+RESULTS:
: 29

#+BEGIN_SRC ocaml
sum []

#+END_SRC

#+RESULTS:
: 0

#+BEGIN_SRC ocaml
let rec drop_value l to_drop = 
  match l with
  | [] -> []
  | to_drop :: tl -> drop_value tl to_drop
  | hd :: tl -> hd :: drop_value tl to_drop

#+END_SRC

#+RESULTS:
: <fun>


#+BEGIN_SRC ocaml
drop_value [1;2;3] 2

#+END_SRC

#+RESULTS:
: []


#+BEGIN_SRC ocaml
let rec drop_value l to_drop = 
  match l with
  | [] -> []
  | hd :: tl ->
     let new_tl = drop_value tl to_drop in 
     if hd = to_drop then new_tl else hd :: new_tl
#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
let rec drop_zero l =
  match l with
  | [] -> []
  | 0  :: tl -> drop_zero tl
  | hd :: tl -> hd :: drop_zero tl
;;


#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
drop_zero [1;2;0;3];;

#+END_SRC

#+RESULTS:
| 1 | 2 | 3 |

* Limitations (and Blessings) of Pattern Matching

#+BEGIN_SRC ocaml
let plus_one_match x =
  match x with
  | 0 -> 1
  | 1 -> 2
  | 2 -> 3
  | 3 -> 4
  | 4 -> 5
  | 5 -> 6
  | _ -> x + 1

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
let plus_one_if x =
  if      x = 0 then 1
  else if x = 1 then 2
  else if x = 2 then 3
  else if x = 3 then 4
  else if x = 4 then 5
  else if x = 5 then 6
  else x + 1
;;

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml

open Core_bench;;
[ Bench.Test.create ~name:"plus_one_match" (fun () ->
      ignore (plus_one_match 10))
; Bench.Test.create ~name:"plus_one_if" (fun () ->
      ignore (plus_one_if 10)) ]
|> Bench.bench
;;

#+END_SRC

#+RESULTS:
: ()
  # Estimated testing time 20s (2 benchmarks x 10s). Change using -quota SECS.
┌────────────────┬──────────┐
│ Name           │ Time/Run │
├────────────────┼──────────┤
│ plus_one_match │  66.51ns │
│ plus_one_if    │ 197.14ns │
└────────────────┴──────────┘
- : unit = ()
# - : string = "org-babel-ocaml-eoe"


#+BEGIN_SRC ocaml
let rec sum_if l = 
  if List.is_empty l then 0
  else List.hd_exn l + sum_if (List.tl_exn l)
#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
let numbers = List.range 0 1000 in
[ Bench.Test.create ~name:"sum_if" (fun () -> ignore (sum_if numbers))
; Bench.Test.create ~name:"sum"    (fun () -> ignore (sum numbers)) ]
|> Bench.bench
#+END_SRC

#+RESULTS:
: ()

Estimated testing time 20s (2 benchmarks x 10s). Change using -quota SECS.
┌────────┬──────────┐
│ Name   │ Time/Run │
├────────┼──────────┤
│ sum_if │ 102.21us │
│ sum    │  50.65us │
└────────┴──────────┘
- : unit = ()
# - : string = "org-babel-ocaml-eoe"
# 

从上面的统计来看，Pattern matching 比 if (alternatives) 更有效率

* Detectiong Errors

#+BEGIN_SRC ocaml
let rec drop_zero l = 
  match l with
  | [] -> []
  | 0 :: tl -> drop_zero tl

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
printf "%s\n"
  (render_table
     ["language";"architect";"first release"]
     [ ["Lisp" ;"John McCarthy" ;"1958"] ;
       ["C"    ;"Dennis Ritchie";"1969"] ;
       ["ML"   ;"Robin Milner"  ;"1973"] ;
       ["OCaml";"Xavier Leroy"  ;"1996"] ;
     ]);;

#+END_SRC

#+RESULTS:
: Characters 0-6:
:   printf "%s\n"
:   ^^^^^^
: Error: Unbound value printf

#+BEGIN_SRC ocaml
List.map ~f:String.length["Hello"; "World"]

#+END_SRC

#+RESULTS:
| 5 | 5 |


#+BEGIN_SRC ocaml
List.map2 ~f:Int.max [1;2;3] [3;2;1]  

#+END_SRC

#+RESULTS:
: Base.List.Or_unequal_lengths.Ok [3, 2, 3]

#+BEGIN_SRC ocaml
List.fold

#+END_SRC

#+RESULTS:
: <fun>

List.fold three arguments
+ a list to process
+ an initial accumulator value
+ a function for updating the accumulator 
  

#+BEGIN_SRC ocaml
List.fold ~init:10 ~f:(+) [1;2;3;4]
#+END_SRC

#+RESULTS:
: 20

#+BEGIN_SRC ocaml
List.fold ~init:[] ~f:(fun list x -> x :: list) [1;2;3;4]

#+END_SRC

#+RESULTS:
| 4 | 3 | 2 | 1 |

#+BEGIN_SRC ocaml
let max_widths header rows = 
  let lengths l = List.map ~f:String.length l in 
  List.fold rows 
    ~init:(lengths header)
    ~f:(fun acc row ->
      List.map2_exn ~f:Int.max acc (lengths row))

#+END_SRC

#+RESULTS:
: val max_widths :
:   Base.String.t Base.List.t ->
:   Base.String.t Base.List.t Base.List.t -> Base.Int.t Base.List.t = <fun>


#+BEGIN_SRC ocaml
let render_separator widths =
  let pieces = List.map widths
      ~f:(fun w -> String.make (w + 2) '-')
  in
  "|" ^ String.concat ~sep:"+" pieces ^ "|"
;;

#+END_SRC

#+RESULTS:
: <fun>


** Performance of String.concat and ^

#+BEGIN_SRC ocaml
let s = "." ^ "." ^ "." ^ "." ^ "." ^ "."

#+END_SRC

#+RESULTS:
: "......"

#+BEGIN_SRC ocaml
let s = String.concat [".";".";".";".";".";".";"."]

#+END_SRC

#+RESULTS:
: "......."

#+BEGIN_SRC ocaml
let pad s length = 
  " " ^ s ^ String.make (length - String.length s + 1) ' '

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
pad "hello" 4

#+END_SRC

#+RESULTS:
: " hello"

* More Useful List Functions

#+BEGIN_SRC ocaml
List.reduce

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
List.reduce ~f:(+) [1;2;3;4;5]

#+END_SRC

#+RESULTS:
: Some 15

#+BEGIN_SRC ocaml
List.reduce ~f:(+) [] 
#+END_SRC

#+RESULTS:
: None

** Filtering with List.filter and List.filter_map

#+BEGIN_SRC ocaml
List.filter ~f:(fun x -> x mod 2 = 1) [1;2;3;4;5]
#+END_SRC

#+RESULTS:
| 1 | 3 | 5 |

#+BEGIN_SRC ocaml
List.filter_map (Sys.ls_dir ".") ~f:(fun fname ->
    match String.rsplit2 ~on:'.' fname with 
    | None | Some ("",_) -> None
    | Some (_,ext) ->
      Some ext)
              |> List.dedup

#+END_SRC

#+RESULTS:
: Characters 17-27:
:   List.filter_map (Sys.ls_dir ".") ~f:(fun fname ->
:                    ^^^^^^^^^^
: Error: Unbound value Sys.ls_dir

#+BEGIN_SRC ocaml
let extensions filenames =
  List.filter_map filenames ~f:(fun fname ->
      match String.rsplit2 ~on:'.' fname with
      | None  | Some ("",_) -> None
      | Some (_,ext) ->
        Some ext)
  |> List.dedup_and_sort ~compare:String.compare

#+END_SRC

#+RESULTS:
:   <fun>
None | Some ("",_) is an Or pattern 

** Partitioning with List.partition_tf

把 List 中的元素用布尔值来判断是否
tf 告诉读者 true 元素是第一个， False 是第二个

#+BEGIN_SRC ocaml
let is_ocaml_source s = 
  match String.rsplit2 s ~on:'.' with
  | Some (_,("ml"|"mli")) -> true
  | _ -> false
#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml

let (ml_files,other_files) =
  List.partition_tf ["foo.c"; "foo.ml"; "bar.ml"; "bar.mli"]  ~f:is_ocaml_source;;
#+END_SRC

#+RESULTS:
| foo.c |


** COMMENT Combining list

#+BEGIN_SRC ocaml
List.append [1;2;3] [4;4;5] 

#+END_SRC

#+RESULTS:
| 1 | 2 | 3 | 4 | 4 | 5 |

也可以这样写

#+BEGIN_SRC ocaml
[1;2;3] @ [4;5;6]
#+END_SRC

#+RESULTS:
| 1 | 2 | 3 | 4 | 5 | 6 |

#+BEGIN_SRC ocaml

List.concat [[1;2];[3;4;5];[6];[]]

#+END_SRC

#+RESULTS:
| 1 | 2 | 3 | 4 | 5 | 6 |


#+BEGIN_SRC ocaml
module Sys = Core.Sys
module Filename = Core.Filename;;
module Sys = Core.Sys
module Filename = Core.Filename
let rec ls_rec s =
  if Sys.is_file_exn ~follow_symlinks:true s
  then [s]
  else
    Sys.ls_dir s
    |> List.map ~f:(fun sub -> ls_rec (Filename.concat s sub))
    |> List.concat


#+END_SRC

#+RESULTS:
: <fun>

* Tail Recursion

#+BEGIN_SRC ocaml
let rec length = function
  | [] -> 0
  | _ :: tl -> 1 + length tl

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
length [1;2;3;3;9]
#+END_SRC

#+RESULTS:
: 5

#+BEGIN_SRC ocaml
let make_list n = List.init n ~f:(fun x -> x)
#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
make_list 10
#+END_SRC

#+RESULTS:
: <abstr>

#+BEGIN_SRC ocaml
length (make_list 10000)

#+END_SRC

#+RESULTS:
: 10000

#+BEGIN_SRC ocaml
let rec length_plus_n l n = 
  match l with
  | [] -> n
  | _ :: tl -> length_plus_n tl (n + 1)

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
let length l = length_plus_n l 0

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml
length [1;2;3;4;4;5;9]

#+END_SRC

#+RESULTS:
: 7

#+BEGIN_SRC ocaml 
length (make_list 100)
#+END_SRC

#+RESULTS:
: 100

* Terser and Faster Patterns

#+BEGIN_SRC ocaml

let rec destutter list =
  match list with
  | [] -> []
  | [hd] -> [hd]
  | hd :: hd' :: tl ->
    if hd = hd' then destutter (hd' :: tl)
    else hd :: destutter (hd' :: tl)
;;

#+END_SRC

val destutter : Base__Int.t Base__List.t -> Base__Int.t Base__List.t = <fun>


#+BEGIN_SRC ocaml
let rec destutter = function
  | [] as l -> l
  | [_] as l -> l
  | hd :: (hd' :: _ as tl) ->
    if hd = hd' then destutter tl
    else hd :: destutter tl

#+END_SRC

#+BEGIN_SRC ocaml
let rec destutter = function
  | [] | [_] as l -> l
  | hd :: (hd' :: _ as tl) ->
    if hd = hd' then destutter tl
    else hd :: destutter tl
;;

#+END_SRC
