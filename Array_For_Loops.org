#+TITLE: Array_For_Loops


* Imperative Programming

** Arrays

#+BEGIN_SRC ocaml
let numbers = [| 1; 2; 3; 4|];; 

#+END_SRC

#+RESULTS:
| 1 | 2 | 3 | 4 |

Arrays 和 Python 一样， 从 0 开始

#+BEGIN_SRC ocaml 
numbers.(2) <- 4;;

#+END_SRC

#+RESULTS:
: ()

#+BEGIN_SRC ocaml
numbers;;

#+END_SRC

#+RESULTS:
| 1 | 2 | 4 | 4 |


** Mutable Record Fields

#+BEGIN_SRC ocaml
type running_sum =
  {
    mutable sum: float;
    mutable sum_sq: float;
    mutable samples: int;
  }
;;
#+END_SRC

#+RESULTS:
: type running_sum = {
:   mutable sum : Base.float;
:   mutable sum_sq : Base.float;
:   mutable samples : Base.int;
: }




#+BEGIN_SRC ocaml 
let mean rsum = rsum.sum /. Float.of_int rsum.samples
let stdev rsum =
  Float.sqrt (rsum.sum_sq /. Float.of_int rsum.samples
              -. (rsum.sum /. Float.of_int rsum.samples) **. 2.) ;;

#+END_SRC

#+RESULTS:
: <fun>


#+BEGIN_SRC ocaml

let create () = { sum = 0.; sum_sq = 0.; samples = 0 }
let update rsum x =
  rsum.samples <- rsum.samples + 1;
  rsum.sum     <- rsum.sum     +. x;
  rsum.sum_sq  <- rsum.sum_sq  +. x *. x
;;
#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml

let rsum = create ();;

#+END_SRC

#+RESULTS:
: {sum = 0.; sum_sq = 0.; samples = 0}

#+BEGIN_SRC ocaml

List.iter [1.;3.;2.;-7.;4.;5.] ~f:(fun x -> update rsum x);; 

#+END_SRC

#+RESULTS:
: ()


#+BEGIN_SRC ocaml

mean rsum;;

#+END_SRC

#+RESULTS:
: 1.3333333333333333

#+BEGIN_SRC ocaml

stdev rsum;;

#+END_SRC

#+RESULTS:
: 3.94405318873307698

* Refs

#+BEGIN_SRC ocaml

let x = { contents = 0 };;

#+END_SRC

#+RESULTS:
: {contents = 0}

#+BEGIN_SRC ocaml

x.contents <- x.contents + 1;;

#+END_SRC

#+RESULTS:
: ()

#+BEGIN_SRC ocaml
x;;

#+END_SRC

#+RESULTS:
: {contents = 1}

#+BEGIN_SRC ocaml

let x = ref 0

#+END_SRC

#+RESULTS:
: {contents = 0}

#+BEGIN_SRC ocaml
!x;;

#+END_SRC

#+RESULTS:
: 0

#+BEGIN_SRC ocaml

x := !x + 1;; (* assignment, i.e., x.contents <- ......*);;
!x;;

#+END_SRC

#+RESULTS:
: 3

#+BEGIN_SRC ocaml

type 'a ref = { mutable contents : 'a }
                
let ref x = { contents = x }
let (!) r = r.contents
let (:=) r x = r.contents <- x
;;
#+END_SRC

#+RESULTS:
: <fun>


#+BEGIN_SRC ocaml
let sum list = 
  let sum = ref 0 in 
  List.iter list ~f:(fun x -> sum := !sum + x);
  !sum
;;

#+END_SRC

#+RESULTS:
: <fun>


* COMMENT For and While Loops

#+BEGIN_SRC ocaml
let permute array = 
  let length = Array.length array in
  for i = 0 to length - 2 do
    (* pick a j to swap with*)
    let j = i + Random.int (length - i) in
    let tmp = array.(i) in
    array.(i) <- array.(j);
    array.(j) <- tmp
done
;;
    

#+END_SRC

#+RESULTS:
: <fun>

#+BEGIN_SRC ocaml

let ar = Array.init 20 ~f:(fun i -> i);;


#+END_SRC

#+RESULTS:
:   [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]

#+BEGIN_SRC ocaml

permute ar;;

ar

#+END_SRC

#+RESULTS:
| 16 | 9 | 6 | 14 | 11 | 8 | 4 | 17 | 15 | 19 | 5 | 2 | 13 | 1 | 18 | 12 | 0 | 3 | 7 | 10 |

#+BEGIN_SRC ocaml
let find_first_negative_entry array = 
  let pos = ref 0 in 
  while !pos < Array.length array && array.(!pos) >= 0 do
    pos := !pos + 1
  done;
  if !pos = Array.length array then None else Some !pos
;;

#+END_SRC

#+RESULTS:
: <fun>


#+BEGIN_SRC ocaml

find_first_negative_entry [|1;2;0;3|];;

#+END_SRC

#+RESULTS:
: None

#+BEGIN_SRC ocaml

find_first_negative_entry [|1;-2;0;3|];; 

#+END_SRC

#+RESULTS:
: Some 1

expr1 && expr2, expr2 will only be evaluated if expr evaluated to true


#+BEGIN_SRC ocaml

let find_first_negative_entry array = 
  let pos = ref 0 in 
  while 
    let pos_is_good = !pos < Array.length array in
    let element_is_non_negative = array.(!pos) >= 0 in
    pos_is_good && element_is_non_negative
  do
    pos := !pos + 1
  done;
  if !pos = Array.length array then None else Some !pos
;;

#+END_SRC

#+RESULTS:
: <fun>

* A Complete Program

#+BEGIN_SRC ocaml

open Core.Std

let rec read_and_accumulate accum = 
  let line = In_channel.input_line In_channel.stdin in
  match line with
  | None -> accum
  | Some x -> read_and_accumulate (accum +. Float.of_string x)

let () = 
  printf "Total: %F\n" (read_and_accumulate 0.);;

#+END_SRC

#+RESULTS:
: Characters 6-14:
:   open Core.Std
:        ^^^^^^^^
: Warning 3: deprecated: module Core.Std
: [since 2017-02] Use Core. The Std sub-module is no longer needed
: Characters -1--1:
:   
:   
: Error: Reference to undefined global `Core__Std0'
